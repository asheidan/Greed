# Add ./lib/ to require's path
$: << File.expand_path(File.dirname(__FILE__) + "/lib")
# require 'code_statistics'
require 'monkeys/array_helper'

trash_dirs = ['tmp']
trash_files = ['uml.dot','uml.png']
metrics_dirs = ['lib']

task :default => :test
task :metrics => [:metric_fu,"metrics:all"]

desc "Requires and configures metric_fu"
task :metric_fu do
  #require(File.join('vendor', 'gems', 'devver-metric_fu-1.3.3', 'lib', 'metric_fu'))
  require 'metric_fu'
  MetricFu::Configuration.run do |config|
  	# Possible metrics:
  	# :churn, :saikuro, :stats, :flog, :flay, :reek, :roodi, :rcov
  	config.metrics = [:churn,:flog,:flay,:reek,:roodi,:saikuro,:rcov]
	
  	# Possible graphs:
  	# :flog, :flay, :reek, :roodi, :rcov
  	config.graphs = [:flog,:flay,:reek,:roodi,:rcov]
	
  	config.flay = {
  	  :dirs_to_flay => metrics_dirs,
  	  :minimum_score => 25
  	}
  	config.flog = { :dirs_to_flog => metrics_dirs }
  	config.reek = { :dirs_to_reek => metrics_dirs }
  	config.roodi = { :dirs_to_roodi  => metrics_dirs }
	
  	config.rcov = {
  		:environment => 'test',
  		:test_files => [
  			'**/test_*.rb'
  		],
  		:rcov_opts => [
  			"--include lib:test",
  			"--exclude /Library/",
  			"--text-coverage",
  #			"--profile",
  			"--no-html","--no-color"
  		]
  	}
	
  	config.graph_engine = :bluff
  end
end

desc "Lists some stats"
task :stats do
  require 'yaml'
  def spacer(title = nil)
    length = 79 - 3 - (title.to_s.length + 2)
    print "---"
    print " #{title} " unless title.nil?
    puts "-"*length
  end
  stats = {}
  totals = {}
  dates = []
  Dir.glob(File.join('tmp','metric_fu','_data','*.yml')).each do |f|
    date =  File.basename(f,'.yml')
    dates << date
    YAML.load_file(f)[:saikuro][:files].each do |h|
      stats[h[:filename]] = {} if stats[h[:filename]].nil?
      sum = h[:classes].collect{ |c| c[:lines] }.sum
      stats[h[:filename]][date] = sum
      totals[date] = totals[date].to_i + sum 
    end
    
  end
  longest_filename = stats.keys.collect{|f| f.length }.max
  
  file_template = "%-#{longest_filename+1}s"
  number_template = " %3d "
  
  # Output table
  spacer("LoC")
  rotated_dates = dates.collect{|e|e.chars.to_a}.transpose
  rotated_dates[0..-2].each do |l|
    printf(file_template, nil)
    l.each do |n|
      printf(number_template,n.to_i)
    end
    puts
  end
  printf( file_template,"Filename" )
  rotated_dates.last.each do |e|
    printf(number_template, e.to_i)
  end
  puts
  spacer
  stats.keys.sort.each do |k|
    printf( file_template, k )
    dates.sort.each do |d|
      printf( number_template,stats[k][d])
    end
    puts
  end
  spacer
  printf( file_template, ["Totals"])
  dates.sort.each do |d|
    printf( number_template,totals[d])
  end
  puts
  spacer
end

task :test => "test:all"
namespace :test do
	desc "Run all tests"
	task :all do
		puts "Running all tests"
		$LOAD_PATH << 'lib' if !($:.include?("lib"))
		$LOAD_PATH << 'test' if !($:.include?("test"))
		Dir.glob("test/**/test_*.rb").each do |f|
			require f
		end
	end
end

directory 'tmp/'

desc "Create UML from source"
task :uml => 'tmp/uml.png'
file "tmp/uml.dot"  => 'tmp/' do
  require 'uml/class_diagram'
  class_diagram = UML::ClassDiagram.new(
    :show_public_methods => false,
    :exclude => [
        /UML.*/, /Rake.*/, Hash, IO, /File.*/, String, Array,
        Class, Module, Enumerable, Fixnum, Symbol, Regexp,
        Object, Kernel,/Logger.*/,/Monitor.*/,NilClass,Comparable
      ]
  )
  Dir.glob("lib/**/*.rb").collect{|f|
    if File.basename(f) != "ui.rb" then
      require f
      mod = Kernel
      klass = nil
      output = `grep '^[  ]*\\(class\\|module\\)' '#{f}' | sed 's/ *<.*//'`.strip
      # puts output.split("\n").inspect
      output.split("\n").each{|l|
        # puts "-- #{l.inspect}"
        if l =~ /^[  ]*module (.*)/ then
          mod = Kernel.const_get Regexp.last_match(1)
        elsif l =~ /^[  ]*class (.*)/ then
          klass = Regexp.last_match(1)
        end
      }
      if !klass.nil? then
        klass = mod.const_get klass
        # puts klass.inspect
        class_diagram.include(klass) unless klass.nil?
      end
    end
  }
  # (Rules.rules + [Players::DummyPlayer,Players::ConsolePlayer,Server]).each{|c|
  #   class_diagram.include(c)
  # }
  # # Rake::Task[:test].execute
  File.open("tmp/uml.dot",'w') do |file|
    file.write class_diagram.to_dot
  end
end

file "tmp/uml.png" => ["tmp/uml.dot",'tmp/'] do
  sh "dot -Tpng -otmp/uml.png tmp/uml.dot"
end

desc "Remove putput files"
task :clean do
	FileUtils.rm_r(trash_dirs + trash_files, :secure => true, :force => true)
end